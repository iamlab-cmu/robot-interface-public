# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from franka_action_lib/ExecuteSkillGoal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ExecuteSkillGoal(genpy.Message):
  _md5sum = "0a5a9702eeb075de3d4f7812c5b9bf0c"
  _type = "franka_action_lib/ExecuteSkillGoal"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
int64 skill_type
string skill_description
int64 meta_skill_type
int64 meta_skill_id

# Sensor topic to subscribe to
string[] sensor_topics
uint64[] sensor_value_sizes
float64[] initial_sensor_values

# traj gen
int64 traj_gen_type
uint64 num_traj_gen_params
float64[] traj_gen_params

# fbc
int64 feedback_controller_type
uint64 num_feedback_controller_params
float64[] feedback_controller_params

# termination
int64 termination_type
uint64 num_termination_params
float64[] termination_params 

# timer
int64 timer_type
uint64 num_timer_params
float64[] timer_params
"""
  __slots__ = ['skill_type','skill_description','meta_skill_type','meta_skill_id','sensor_topics','sensor_value_sizes','initial_sensor_values','traj_gen_type','num_traj_gen_params','traj_gen_params','feedback_controller_type','num_feedback_controller_params','feedback_controller_params','termination_type','num_termination_params','termination_params','timer_type','num_timer_params','timer_params']
  _slot_types = ['int64','string','int64','int64','string[]','uint64[]','float64[]','int64','uint64','float64[]','int64','uint64','float64[]','int64','uint64','float64[]','int64','uint64','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       skill_type,skill_description,meta_skill_type,meta_skill_id,sensor_topics,sensor_value_sizes,initial_sensor_values,traj_gen_type,num_traj_gen_params,traj_gen_params,feedback_controller_type,num_feedback_controller_params,feedback_controller_params,termination_type,num_termination_params,termination_params,timer_type,num_timer_params,timer_params

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ExecuteSkillGoal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.skill_type is None:
        self.skill_type = 0
      if self.skill_description is None:
        self.skill_description = ''
      if self.meta_skill_type is None:
        self.meta_skill_type = 0
      if self.meta_skill_id is None:
        self.meta_skill_id = 0
      if self.sensor_topics is None:
        self.sensor_topics = []
      if self.sensor_value_sizes is None:
        self.sensor_value_sizes = []
      if self.initial_sensor_values is None:
        self.initial_sensor_values = []
      if self.traj_gen_type is None:
        self.traj_gen_type = 0
      if self.num_traj_gen_params is None:
        self.num_traj_gen_params = 0
      if self.traj_gen_params is None:
        self.traj_gen_params = []
      if self.feedback_controller_type is None:
        self.feedback_controller_type = 0
      if self.num_feedback_controller_params is None:
        self.num_feedback_controller_params = 0
      if self.feedback_controller_params is None:
        self.feedback_controller_params = []
      if self.termination_type is None:
        self.termination_type = 0
      if self.num_termination_params is None:
        self.num_termination_params = 0
      if self.termination_params is None:
        self.termination_params = []
      if self.timer_type is None:
        self.timer_type = 0
      if self.num_timer_params is None:
        self.num_timer_params = 0
      if self.timer_params is None:
        self.timer_params = []
    else:
      self.skill_type = 0
      self.skill_description = ''
      self.meta_skill_type = 0
      self.meta_skill_id = 0
      self.sensor_topics = []
      self.sensor_value_sizes = []
      self.initial_sensor_values = []
      self.traj_gen_type = 0
      self.num_traj_gen_params = 0
      self.traj_gen_params = []
      self.feedback_controller_type = 0
      self.num_feedback_controller_params = 0
      self.feedback_controller_params = []
      self.termination_type = 0
      self.num_termination_params = 0
      self.termination_params = []
      self.timer_type = 0
      self.num_timer_params = 0
      self.timer_params = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_q().pack(self.skill_type))
      _x = self.skill_description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2q().pack(_x.meta_skill_type, _x.meta_skill_id))
      length = len(self.sensor_topics)
      buff.write(_struct_I.pack(length))
      for val1 in self.sensor_topics:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.sensor_value_sizes)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.pack(pattern, *self.sensor_value_sizes))
      length = len(self.initial_sensor_values)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.initial_sensor_values))
      _x = self
      buff.write(_get_struct_qQ().pack(_x.traj_gen_type, _x.num_traj_gen_params))
      length = len(self.traj_gen_params)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.traj_gen_params))
      _x = self
      buff.write(_get_struct_qQ().pack(_x.feedback_controller_type, _x.num_feedback_controller_params))
      length = len(self.feedback_controller_params)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.feedback_controller_params))
      _x = self
      buff.write(_get_struct_qQ().pack(_x.termination_type, _x.num_termination_params))
      length = len(self.termination_params)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.termination_params))
      _x = self
      buff.write(_get_struct_qQ().pack(_x.timer_type, _x.num_timer_params))
      length = len(self.timer_params)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.timer_params))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 8
      (self.skill_type,) = _get_struct_q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.skill_description = str[start:end].decode('utf-8')
      else:
        self.skill_description = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.meta_skill_type, _x.meta_skill_id,) = _get_struct_2q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sensor_topics = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.sensor_topics.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      end += struct.calcsize(pattern)
      self.sensor_value_sizes = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.initial_sensor_values = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 16
      (_x.traj_gen_type, _x.num_traj_gen_params,) = _get_struct_qQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.traj_gen_params = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 16
      (_x.feedback_controller_type, _x.num_feedback_controller_params,) = _get_struct_qQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.feedback_controller_params = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 16
      (_x.termination_type, _x.num_termination_params,) = _get_struct_qQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.termination_params = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 16
      (_x.timer_type, _x.num_timer_params,) = _get_struct_qQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.timer_params = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_q().pack(self.skill_type))
      _x = self.skill_description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2q().pack(_x.meta_skill_type, _x.meta_skill_id))
      length = len(self.sensor_topics)
      buff.write(_struct_I.pack(length))
      for val1 in self.sensor_topics:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.sensor_value_sizes)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.sensor_value_sizes.tostring())
      length = len(self.initial_sensor_values)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.initial_sensor_values.tostring())
      _x = self
      buff.write(_get_struct_qQ().pack(_x.traj_gen_type, _x.num_traj_gen_params))
      length = len(self.traj_gen_params)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.traj_gen_params.tostring())
      _x = self
      buff.write(_get_struct_qQ().pack(_x.feedback_controller_type, _x.num_feedback_controller_params))
      length = len(self.feedback_controller_params)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.feedback_controller_params.tostring())
      _x = self
      buff.write(_get_struct_qQ().pack(_x.termination_type, _x.num_termination_params))
      length = len(self.termination_params)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.termination_params.tostring())
      _x = self
      buff.write(_get_struct_qQ().pack(_x.timer_type, _x.num_timer_params))
      length = len(self.timer_params)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.timer_params.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 8
      (self.skill_type,) = _get_struct_q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.skill_description = str[start:end].decode('utf-8')
      else:
        self.skill_description = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.meta_skill_type, _x.meta_skill_id,) = _get_struct_2q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sensor_topics = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.sensor_topics.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      end += struct.calcsize(pattern)
      self.sensor_value_sizes = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.initial_sensor_values = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 16
      (_x.traj_gen_type, _x.num_traj_gen_params,) = _get_struct_qQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.traj_gen_params = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 16
      (_x.feedback_controller_type, _x.num_feedback_controller_params,) = _get_struct_qQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.feedback_controller_params = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 16
      (_x.termination_type, _x.num_termination_params,) = _get_struct_qQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.termination_params = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 16
      (_x.timer_type, _x.num_timer_params,) = _get_struct_qQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.timer_params = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_q = None
def _get_struct_q():
    global _struct_q
    if _struct_q is None:
        _struct_q = struct.Struct("<q")
    return _struct_q
_struct_qQ = None
def _get_struct_qQ():
    global _struct_qQ
    if _struct_qQ is None:
        _struct_qQ = struct.Struct("<qQ")
    return _struct_qQ
_struct_2q = None
def _get_struct_2q():
    global _struct_2q
    if _struct_2q is None:
        _struct_2q = struct.Struct("<2q")
    return _struct_2q
