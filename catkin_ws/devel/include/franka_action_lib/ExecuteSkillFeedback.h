// Generated by gencpp from file franka_action_lib/ExecuteSkillFeedback.msg
// DO NOT EDIT!


#ifndef FRANKA_ACTION_LIB_MESSAGE_EXECUTESKILLFEEDBACK_H
#define FRANKA_ACTION_LIB_MESSAGE_EXECUTESKILLFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace franka_action_lib
{
template <class ContainerAllocator>
struct ExecuteSkillFeedback_
{
  typedef ExecuteSkillFeedback_<ContainerAllocator> Type;

  ExecuteSkillFeedback_()
    : num_execution_feedback(0)
    , execution_feedback()  {
    }
  ExecuteSkillFeedback_(const ContainerAllocator& _alloc)
    : num_execution_feedback(0)
    , execution_feedback(_alloc)  {
  (void)_alloc;
    }



   typedef uint64_t _num_execution_feedback_type;
  _num_execution_feedback_type num_execution_feedback;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _execution_feedback_type;
  _execution_feedback_type execution_feedback;





  typedef boost::shared_ptr< ::franka_action_lib::ExecuteSkillFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::franka_action_lib::ExecuteSkillFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct ExecuteSkillFeedback_

typedef ::franka_action_lib::ExecuteSkillFeedback_<std::allocator<void> > ExecuteSkillFeedback;

typedef boost::shared_ptr< ::franka_action_lib::ExecuteSkillFeedback > ExecuteSkillFeedbackPtr;
typedef boost::shared_ptr< ::franka_action_lib::ExecuteSkillFeedback const> ExecuteSkillFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::franka_action_lib::ExecuteSkillFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::franka_action_lib::ExecuteSkillFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace franka_action_lib

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'franka_action_lib': ['/home/klz1/Documents/robot-interface/catkin_ws/src/franka_action_lib/msg', '/home/klz1/Documents/robot-interface/catkin_ws/devel/share/franka_action_lib/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::franka_action_lib::ExecuteSkillFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::franka_action_lib::ExecuteSkillFeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::franka_action_lib::ExecuteSkillFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::franka_action_lib::ExecuteSkillFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::franka_action_lib::ExecuteSkillFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::franka_action_lib::ExecuteSkillFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::franka_action_lib::ExecuteSkillFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6a83e458e6b9fb5f35f56a73f74fb809";
  }

  static const char* value(const ::franka_action_lib::ExecuteSkillFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6a83e458e6b9fb5fULL;
  static const uint64_t static_value2 = 0x35f56a73f74fb809ULL;
};

template<class ContainerAllocator>
struct DataType< ::franka_action_lib::ExecuteSkillFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "franka_action_lib/ExecuteSkillFeedback";
  }

  static const char* value(const ::franka_action_lib::ExecuteSkillFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::franka_action_lib::ExecuteSkillFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Feedback message - happens during skill execution \n\
uint64 num_execution_feedback\n\
float64[] execution_feedback\n\
\n\
";
  }

  static const char* value(const ::franka_action_lib::ExecuteSkillFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::franka_action_lib::ExecuteSkillFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.num_execution_feedback);
      stream.next(m.execution_feedback);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ExecuteSkillFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::franka_action_lib::ExecuteSkillFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::franka_action_lib::ExecuteSkillFeedback_<ContainerAllocator>& v)
  {
    s << indent << "num_execution_feedback: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.num_execution_feedback);
    s << indent << "execution_feedback[]" << std::endl;
    for (size_t i = 0; i < v.execution_feedback.size(); ++i)
    {
      s << indent << "  execution_feedback[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.execution_feedback[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FRANKA_ACTION_LIB_MESSAGE_EXECUTESKILLFEEDBACK_H
