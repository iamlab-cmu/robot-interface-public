// Generated by gencpp from file franka_action_lib/ExecuteSkillGoal.msg
// DO NOT EDIT!


#ifndef FRANKA_ACTION_LIB_MESSAGE_EXECUTESKILLGOAL_H
#define FRANKA_ACTION_LIB_MESSAGE_EXECUTESKILLGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace franka_action_lib
{
template <class ContainerAllocator>
struct ExecuteSkillGoal_
{
  typedef ExecuteSkillGoal_<ContainerAllocator> Type;

  ExecuteSkillGoal_()
    : skill_type(0)
    , skill_description()
    , meta_skill_type(0)
    , meta_skill_id(0)
    , sensor_topics()
    , sensor_value_sizes()
    , initial_sensor_values()
    , traj_gen_type(0)
    , num_traj_gen_params(0)
    , traj_gen_params()
    , feedback_controller_type(0)
    , num_feedback_controller_params(0)
    , feedback_controller_params()
    , termination_type(0)
    , num_termination_params(0)
    , termination_params()
    , timer_type(0)
    , num_timer_params(0)
    , timer_params()  {
    }
  ExecuteSkillGoal_(const ContainerAllocator& _alloc)
    : skill_type(0)
    , skill_description(_alloc)
    , meta_skill_type(0)
    , meta_skill_id(0)
    , sensor_topics(_alloc)
    , sensor_value_sizes(_alloc)
    , initial_sensor_values(_alloc)
    , traj_gen_type(0)
    , num_traj_gen_params(0)
    , traj_gen_params(_alloc)
    , feedback_controller_type(0)
    , num_feedback_controller_params(0)
    , feedback_controller_params(_alloc)
    , termination_type(0)
    , num_termination_params(0)
    , termination_params(_alloc)
    , timer_type(0)
    , num_timer_params(0)
    , timer_params(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _skill_type_type;
  _skill_type_type skill_type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _skill_description_type;
  _skill_description_type skill_description;

   typedef int64_t _meta_skill_type_type;
  _meta_skill_type_type meta_skill_type;

   typedef int64_t _meta_skill_id_type;
  _meta_skill_id_type meta_skill_id;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _sensor_topics_type;
  _sensor_topics_type sensor_topics;

   typedef std::vector<uint64_t, typename ContainerAllocator::template rebind<uint64_t>::other >  _sensor_value_sizes_type;
  _sensor_value_sizes_type sensor_value_sizes;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _initial_sensor_values_type;
  _initial_sensor_values_type initial_sensor_values;

   typedef int64_t _traj_gen_type_type;
  _traj_gen_type_type traj_gen_type;

   typedef uint64_t _num_traj_gen_params_type;
  _num_traj_gen_params_type num_traj_gen_params;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _traj_gen_params_type;
  _traj_gen_params_type traj_gen_params;

   typedef int64_t _feedback_controller_type_type;
  _feedback_controller_type_type feedback_controller_type;

   typedef uint64_t _num_feedback_controller_params_type;
  _num_feedback_controller_params_type num_feedback_controller_params;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _feedback_controller_params_type;
  _feedback_controller_params_type feedback_controller_params;

   typedef int64_t _termination_type_type;
  _termination_type_type termination_type;

   typedef uint64_t _num_termination_params_type;
  _num_termination_params_type num_termination_params;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _termination_params_type;
  _termination_params_type termination_params;

   typedef int64_t _timer_type_type;
  _timer_type_type timer_type;

   typedef uint64_t _num_timer_params_type;
  _num_timer_params_type num_timer_params;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _timer_params_type;
  _timer_params_type timer_params;





  typedef boost::shared_ptr< ::franka_action_lib::ExecuteSkillGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::franka_action_lib::ExecuteSkillGoal_<ContainerAllocator> const> ConstPtr;

}; // struct ExecuteSkillGoal_

typedef ::franka_action_lib::ExecuteSkillGoal_<std::allocator<void> > ExecuteSkillGoal;

typedef boost::shared_ptr< ::franka_action_lib::ExecuteSkillGoal > ExecuteSkillGoalPtr;
typedef boost::shared_ptr< ::franka_action_lib::ExecuteSkillGoal const> ExecuteSkillGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::franka_action_lib::ExecuteSkillGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::franka_action_lib::ExecuteSkillGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace franka_action_lib

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'franka_action_lib': ['/home/klz1/Documents/robot-interface/catkin_ws/src/franka_action_lib/msg', '/home/klz1/Documents/robot-interface/catkin_ws/devel/share/franka_action_lib/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::franka_action_lib::ExecuteSkillGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::franka_action_lib::ExecuteSkillGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::franka_action_lib::ExecuteSkillGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::franka_action_lib::ExecuteSkillGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::franka_action_lib::ExecuteSkillGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::franka_action_lib::ExecuteSkillGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::franka_action_lib::ExecuteSkillGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0a5a9702eeb075de3d4f7812c5b9bf0c";
  }

  static const char* value(const ::franka_action_lib::ExecuteSkillGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0a5a9702eeb075deULL;
  static const uint64_t static_value2 = 0x3d4f7812c5b9bf0cULL;
};

template<class ContainerAllocator>
struct DataType< ::franka_action_lib::ExecuteSkillGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "franka_action_lib/ExecuteSkillGoal";
  }

  static const char* value(const ::franka_action_lib::ExecuteSkillGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::franka_action_lib::ExecuteSkillGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
int64 skill_type\n\
string skill_description\n\
int64 meta_skill_type\n\
int64 meta_skill_id\n\
\n\
# Sensor topic to subscribe to\n\
string[] sensor_topics\n\
uint64[] sensor_value_sizes\n\
float64[] initial_sensor_values\n\
\n\
# traj gen\n\
int64 traj_gen_type\n\
uint64 num_traj_gen_params\n\
float64[] traj_gen_params\n\
\n\
# fbc\n\
int64 feedback_controller_type\n\
uint64 num_feedback_controller_params\n\
float64[] feedback_controller_params\n\
\n\
# termination\n\
int64 termination_type\n\
uint64 num_termination_params\n\
float64[] termination_params \n\
\n\
# timer\n\
int64 timer_type\n\
uint64 num_timer_params\n\
float64[] timer_params\n\
";
  }

  static const char* value(const ::franka_action_lib::ExecuteSkillGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::franka_action_lib::ExecuteSkillGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.skill_type);
      stream.next(m.skill_description);
      stream.next(m.meta_skill_type);
      stream.next(m.meta_skill_id);
      stream.next(m.sensor_topics);
      stream.next(m.sensor_value_sizes);
      stream.next(m.initial_sensor_values);
      stream.next(m.traj_gen_type);
      stream.next(m.num_traj_gen_params);
      stream.next(m.traj_gen_params);
      stream.next(m.feedback_controller_type);
      stream.next(m.num_feedback_controller_params);
      stream.next(m.feedback_controller_params);
      stream.next(m.termination_type);
      stream.next(m.num_termination_params);
      stream.next(m.termination_params);
      stream.next(m.timer_type);
      stream.next(m.num_timer_params);
      stream.next(m.timer_params);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ExecuteSkillGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::franka_action_lib::ExecuteSkillGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::franka_action_lib::ExecuteSkillGoal_<ContainerAllocator>& v)
  {
    s << indent << "skill_type: ";
    Printer<int64_t>::stream(s, indent + "  ", v.skill_type);
    s << indent << "skill_description: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.skill_description);
    s << indent << "meta_skill_type: ";
    Printer<int64_t>::stream(s, indent + "  ", v.meta_skill_type);
    s << indent << "meta_skill_id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.meta_skill_id);
    s << indent << "sensor_topics[]" << std::endl;
    for (size_t i = 0; i < v.sensor_topics.size(); ++i)
    {
      s << indent << "  sensor_topics[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.sensor_topics[i]);
    }
    s << indent << "sensor_value_sizes[]" << std::endl;
    for (size_t i = 0; i < v.sensor_value_sizes.size(); ++i)
    {
      s << indent << "  sensor_value_sizes[" << i << "]: ";
      Printer<uint64_t>::stream(s, indent + "  ", v.sensor_value_sizes[i]);
    }
    s << indent << "initial_sensor_values[]" << std::endl;
    for (size_t i = 0; i < v.initial_sensor_values.size(); ++i)
    {
      s << indent << "  initial_sensor_values[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.initial_sensor_values[i]);
    }
    s << indent << "traj_gen_type: ";
    Printer<int64_t>::stream(s, indent + "  ", v.traj_gen_type);
    s << indent << "num_traj_gen_params: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.num_traj_gen_params);
    s << indent << "traj_gen_params[]" << std::endl;
    for (size_t i = 0; i < v.traj_gen_params.size(); ++i)
    {
      s << indent << "  traj_gen_params[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.traj_gen_params[i]);
    }
    s << indent << "feedback_controller_type: ";
    Printer<int64_t>::stream(s, indent + "  ", v.feedback_controller_type);
    s << indent << "num_feedback_controller_params: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.num_feedback_controller_params);
    s << indent << "feedback_controller_params[]" << std::endl;
    for (size_t i = 0; i < v.feedback_controller_params.size(); ++i)
    {
      s << indent << "  feedback_controller_params[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.feedback_controller_params[i]);
    }
    s << indent << "termination_type: ";
    Printer<int64_t>::stream(s, indent + "  ", v.termination_type);
    s << indent << "num_termination_params: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.num_termination_params);
    s << indent << "termination_params[]" << std::endl;
    for (size_t i = 0; i < v.termination_params.size(); ++i)
    {
      s << indent << "  termination_params[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.termination_params[i]);
    }
    s << indent << "timer_type: ";
    Printer<int64_t>::stream(s, indent + "  ", v.timer_type);
    s << indent << "num_timer_params: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.num_timer_params);
    s << indent << "timer_params[]" << std::endl;
    for (size_t i = 0; i < v.timer_params.size(); ++i)
    {
      s << indent << "  timer_params[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.timer_params[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FRANKA_ACTION_LIB_MESSAGE_EXECUTESKILLGOAL_H
