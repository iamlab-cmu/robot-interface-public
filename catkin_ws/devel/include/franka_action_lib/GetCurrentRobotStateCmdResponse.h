// Generated by gencpp from file franka_action_lib/GetCurrentRobotStateCmdResponse.msg
// DO NOT EDIT!


#ifndef FRANKA_ACTION_LIB_MESSAGE_GETCURRENTROBOTSTATECMDRESPONSE_H
#define FRANKA_ACTION_LIB_MESSAGE_GETCURRENTROBOTSTATECMDRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <franka_action_lib/RobotState.h>

namespace franka_action_lib
{
template <class ContainerAllocator>
struct GetCurrentRobotStateCmdResponse_
{
  typedef GetCurrentRobotStateCmdResponse_<ContainerAllocator> Type;

  GetCurrentRobotStateCmdResponse_()
    : robot_state()  {
    }
  GetCurrentRobotStateCmdResponse_(const ContainerAllocator& _alloc)
    : robot_state(_alloc)  {
  (void)_alloc;
    }



   typedef  ::franka_action_lib::RobotState_<ContainerAllocator>  _robot_state_type;
  _robot_state_type robot_state;





  typedef boost::shared_ptr< ::franka_action_lib::GetCurrentRobotStateCmdResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::franka_action_lib::GetCurrentRobotStateCmdResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetCurrentRobotStateCmdResponse_

typedef ::franka_action_lib::GetCurrentRobotStateCmdResponse_<std::allocator<void> > GetCurrentRobotStateCmdResponse;

typedef boost::shared_ptr< ::franka_action_lib::GetCurrentRobotStateCmdResponse > GetCurrentRobotStateCmdResponsePtr;
typedef boost::shared_ptr< ::franka_action_lib::GetCurrentRobotStateCmdResponse const> GetCurrentRobotStateCmdResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::franka_action_lib::GetCurrentRobotStateCmdResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::franka_action_lib::GetCurrentRobotStateCmdResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace franka_action_lib

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'franka_action_lib': ['/home/klz1/Documents/robot-interface/catkin_ws/src/franka_action_lib/msg', '/home/klz1/Documents/robot-interface/catkin_ws/devel/share/franka_action_lib/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::franka_action_lib::GetCurrentRobotStateCmdResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::franka_action_lib::GetCurrentRobotStateCmdResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::franka_action_lib::GetCurrentRobotStateCmdResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::franka_action_lib::GetCurrentRobotStateCmdResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::franka_action_lib::GetCurrentRobotStateCmdResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::franka_action_lib::GetCurrentRobotStateCmdResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::franka_action_lib::GetCurrentRobotStateCmdResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9d11d5ba31b9f0ae529e9a5c66e25ee4";
  }

  static const char* value(const ::franka_action_lib::GetCurrentRobotStateCmdResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9d11d5ba31b9f0aeULL;
  static const uint64_t static_value2 = 0x529e9a5c66e25ee4ULL;
};

template<class ContainerAllocator>
struct DataType< ::franka_action_lib::GetCurrentRobotStateCmdResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "franka_action_lib/GetCurrentRobotStateCmdResponse";
  }

  static const char* value(const ::franka_action_lib::GetCurrentRobotStateCmdResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::franka_action_lib::GetCurrentRobotStateCmdResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RobotState robot_state\n\
\n\
================================================================================\n\
MSG: franka_action_lib/RobotState\n\
# Franka robot state\n\
# For more information about each field, look at robot_state.h here: \n\
# https://github.com/frankaemika/libfranka/blob/master/include/franka/robot_state.h\n\
std_msgs/Header header\n\
float64[16] O_T_EE \n\
float64[16] O_T_EE_d\n\
float64[16] F_T_EE\n\
float64[16] EE_T_K\n\
float64 m_ee\n\
float64[9] I_ee\n\
float64[3] F_x_Cee\n\
float64 m_load\n\
float64[9] I_load\n\
float64[3] F_x_Cload\n\
float64 m_total\n\
float64[9] I_total\n\
float64[3] F_x_Ctotal\n\
float64[2] elbow\n\
float64[2] elbow_d\n\
float64[2] elbow_c\n\
float64[2] delbow_c\n\
float64[2] ddelbow_c\n\
float64[7] tau_J\n\
float64[7] tau_J_d\n\
float64[7] dtau_J\n\
float64[7] q\n\
float64[7] q_d\n\
float64[7] dq\n\
float64[7] dq_d\n\
float64[7] ddq_d\n\
float64[7] joint_contact\n\
float64[6] cartesian_contact\n\
float64[7] joint_collision\n\
float64[6] cartesian_collision\n\
float64[7] tau_ext_hat_filtered\n\
float64[6] O_F_ext_hat_K\n\
float64[6] K_F_ext_hat_K\n\
float64[6] O_dP_EE_d\n\
float64[16] O_T_EE_c\n\
float64[6] O_dP_EE_c\n\
float64[6] O_ddP_EE_c\n\
float64[7] theta\n\
float64[7] dtheta\n\
Errors current_errors\n\
Errors last_motion_errors\n\
float64 control_command_success_rate\n\
uint8 ROBOT_MODE_OTHER=0\n\
uint8 ROBOT_MODE_IDLE=1\n\
uint8 ROBOT_MODE_MOVE=2\n\
uint8 ROBOT_MODE_GUIDING=3\n\
uint8 ROBOT_MODE_REFLEX=4\n\
uint8 ROBOT_MODE_USER_STOPPED=5\n\
uint8 ROBOT_MODE_AUTOMATIC_ERROR_RECOVERY=6\n\
uint8 robot_mode\n\
float64 robot_time\n\
float64 gripper_width\n\
float64 gripper_max_width\n\
bool gripper_is_grasped\n\
uint16 gripper_temperature\n\
float64 gripper_time\n\
bool is_fresh\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: franka_action_lib/Errors\n\
bool joint_position_limits_violation\n\
bool cartesian_position_limits_violation\n\
bool self_collision_avoidance_violation\n\
bool joint_velocity_violation\n\
bool cartesian_velocity_violation\n\
bool force_control_safety_violation\n\
bool joint_reflex\n\
bool cartesian_reflex\n\
bool max_goal_pose_deviation_violation\n\
bool max_path_pose_deviation_violation\n\
bool cartesian_velocity_profile_safety_violation\n\
bool joint_position_motion_generator_start_pose_invalid\n\
bool joint_motion_generator_position_limits_violation\n\
bool joint_motion_generator_velocity_limits_violation\n\
bool joint_motion_generator_velocity_discontinuity\n\
bool joint_motion_generator_acceleration_discontinuity\n\
bool cartesian_position_motion_generator_start_pose_invalid\n\
bool cartesian_motion_generator_elbow_limit_violation\n\
bool cartesian_motion_generator_velocity_limits_violation\n\
bool cartesian_motion_generator_velocity_discontinuity\n\
bool cartesian_motion_generator_acceleration_discontinuity\n\
bool cartesian_motion_generator_elbow_sign_inconsistent\n\
bool cartesian_motion_generator_start_elbow_invalid\n\
bool cartesian_motion_generator_joint_position_limits_violation\n\
bool cartesian_motion_generator_joint_velocity_limits_violation\n\
bool cartesian_motion_generator_joint_velocity_discontinuity\n\
bool cartesian_motion_generator_joint_acceleration_discontinuity\n\
bool cartesian_position_motion_generator_invalid_frame\n\
bool force_controller_desired_force_tolerance_violation\n\
bool controller_torque_discontinuity\n\
bool start_elbow_sign_inconsistent\n\
bool communication_constraints_violation\n\
bool power_limit_violation\n\
bool joint_p2p_insufficient_torque_for_planning\n\
bool tau_j_range_violation\n\
bool instability_detected\n\
bool joint_move_in_wrong_direction\n\
";
  }

  static const char* value(const ::franka_action_lib::GetCurrentRobotStateCmdResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::franka_action_lib::GetCurrentRobotStateCmdResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetCurrentRobotStateCmdResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::franka_action_lib::GetCurrentRobotStateCmdResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::franka_action_lib::GetCurrentRobotStateCmdResponse_<ContainerAllocator>& v)
  {
    s << indent << "robot_state: ";
    s << std::endl;
    Printer< ::franka_action_lib::RobotState_<ContainerAllocator> >::stream(s, indent + "  ", v.robot_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FRANKA_ACTION_LIB_MESSAGE_GETCURRENTROBOTSTATECMDRESPONSE_H
