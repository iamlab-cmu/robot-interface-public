;; Auto-generated. Do not edit!


(when (boundp 'franka_action_lib::ExecuteSkillFeedback)
  (if (not (find-package "FRANKA_ACTION_LIB"))
    (make-package "FRANKA_ACTION_LIB"))
  (shadow 'ExecuteSkillFeedback (find-package "FRANKA_ACTION_LIB")))
(unless (find-package "FRANKA_ACTION_LIB::EXECUTESKILLFEEDBACK")
  (make-package "FRANKA_ACTION_LIB::EXECUTESKILLFEEDBACK"))

(in-package "ROS")
;;//! \htmlinclude ExecuteSkillFeedback.msg.html


(defclass franka_action_lib::ExecuteSkillFeedback
  :super ros::object
  :slots (_num_execution_feedback _execution_feedback ))

(defmethod franka_action_lib::ExecuteSkillFeedback
  (:init
   (&key
    ((:num_execution_feedback __num_execution_feedback) 0)
    ((:execution_feedback __execution_feedback) (make-array 0 :initial-element 0.0 :element-type :float))
    )
   (send-super :init)
   (setq _num_execution_feedback (round __num_execution_feedback))
   (setq _execution_feedback __execution_feedback)
   self)
  (:num_execution_feedback
   (&optional __num_execution_feedback)
   (if __num_execution_feedback (setq _num_execution_feedback __num_execution_feedback)) _num_execution_feedback)
  (:execution_feedback
   (&optional __execution_feedback)
   (if __execution_feedback (setq _execution_feedback __execution_feedback)) _execution_feedback)
  (:serialization-length
   ()
   (+
    ;; uint64 _num_execution_feedback
    8
    ;; float64[] _execution_feedback
    (* 8    (length _execution_feedback)) 4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; uint64 _num_execution_feedback
#+(or :alpha :irix6 :x86_64)
       (progn (sys::poke _num_execution_feedback (send s :buffer) (send s :count) :long) (incf (stream-count s) 8))
#-(or :alpha :irix6 :x86_64)
       (cond ((and (class _num_execution_feedback) (= (length (_num_execution_feedback . bv)) 2)) ;; bignum
              (write-long (ash (elt (_num_execution_feedback . bv) 0) 0) s)
              (write-long (ash (elt (_num_execution_feedback . bv) 1) -1) s))
             ((and (class _num_execution_feedback) (= (length (_num_execution_feedback . bv)) 1)) ;; big1
              (write-long (elt (_num_execution_feedback . bv) 0) s)
              (write-long (if (>= _num_execution_feedback 0) 0 #xffffffff) s))
             (t                                         ;; integer
              (write-long _num_execution_feedback s)(write-long (if (>= _num_execution_feedback 0) 0 #xffffffff) s)))
     ;; float64[] _execution_feedback
     (write-long (length _execution_feedback) s)
     (dotimes (i (length _execution_feedback))
       (sys::poke (elt _execution_feedback i) (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
       )
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; uint64 _num_execution_feedback
     
#+(or :alpha :irix6 :x86_64)
      (setf _num_execution_feedback (prog1 (sys::peek buf ptr- :long) (incf ptr- 8)))
#-(or :alpha :irix6 :x86_64)
      (setf _num_execution_feedback (let ((b0 (prog1 (sys::peek buf ptr- :integer) (incf ptr- 4)))
                  (b1 (prog1 (sys::peek buf ptr- :integer) (incf ptr- 4))))
              (cond ((= b1 -1) b0)
                     ((and (= b1  0)
                           (<= lisp::most-negative-fixnum b0 lisp::most-positive-fixnum))
                      b0)
                    ((= b1  0) (make-instance bignum :size 1 :bv (integer-vector b0)))
                    (t (make-instance bignum :size 2 :bv (integer-vector b0 (ash b1 1)))))))
   ;; float64[] _execution_feedback
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _execution_feedback (instantiate float-vector n))
     (dotimes (i n)
     (setf (elt _execution_feedback i) (sys::peek buf ptr- :double)) (incf ptr- 8)
     ))
   ;;
   self)
  )

(setf (get franka_action_lib::ExecuteSkillFeedback :md5sum-) "6a83e458e6b9fb5f35f56a73f74fb809")
(setf (get franka_action_lib::ExecuteSkillFeedback :datatype-) "franka_action_lib/ExecuteSkillFeedback")
(setf (get franka_action_lib::ExecuteSkillFeedback :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Feedback message - happens during skill execution 
uint64 num_execution_feedback
float64[] execution_feedback


")



(provide :franka_action_lib/ExecuteSkillFeedback "6a83e458e6b9fb5f35f56a73f74fb809")


